'View Dataset'
SELECT * 
FROM IMDBTop250MoviesCleanedIMDBTop250Movies
'change table name'
ALTER TABLE IMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO Movies
'Top 5 movies'
SELECT name, budget
FROM Movies
Order BY budget DESC
Limit 5

'Princess Mononoke update'
UPDATE Movies
SET budget = REPLACE(budget, 2400000000, 23500000)

'3 Idiots update'
UPDATE Movies
SET budget = REPLACE(budget, 550000000, 6700000)
                     
'Top 5 movies budget'
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5

'Top 5 movies'
SELECT name, rating
FROM Movies
ORDER BY rating DESC
LIMIT 5

'Top 5 box office hits'
 SELECT name, box_office
 FROM Movies
 ORDER BY box_office DESC
 LIMIT 5
 
 'Top 10 highest profits'
 SELECT name, (Box_office - budget) AS profit
 FROM Movies
 Order by profit DESC
 LIMIT 10
 
 'Most popular genre'
 SELECT genre, COUNT(*) AS genre_count
 FROM (
   SELECT TRIM(value) AS genre
   FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5
   
'Top 10 Directors'
SELECT directors, Count(*) AS Number_of_movies
FROM Movies
GROUP BY directors
ORDER BY Count(*) DESC
LIMIT 10

'How many movies in each rating category?'
SELECT certificate, count(*) AS total
FROM Movies
GROUP BY certificate
ORDER BY total DESC

'Top 5 Best Years'
SELECT Year, Count(year) as Number_of_movies_per_year
FROM Movies
GROUP BY year
ORDER BY Number_of_movies_per_year DESC
LIMIT 5

'How many movies in each decade?'
SELECT 
    year/10 * 10 + 1 as decade_start,
    year/10 * 10 + 10 as decade_end,
    COUNT(year) as number_of_movies
FROM  Movies
GROUP BY year/10 
ORDER BY decade_start

'Most popular movie genre in each decade'
WITH genre_counts AS (
  SELECT genre, COUNT(*) AS genre_count, year
  FROM (
    SELECT TRIM(value) AS genre, year
    FROM Movies
    CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
  )
  GROUP BY genre, year
), decade_max_genre AS (
  SELECT d.decade_start, d.decade_end, gc.genre,
         ROW_NUMBER() OVER (PARTITION BY d.decade_start ORDER BY gc.genre_count DESC) AS rn
  FROM (
    SELECT 
      year/10 * 10 + 1 AS decade_start,
      year/10 * 10 + 10 AS decade_end
    FROM Movies
    GROUP BY year/10
  ) d
  JOIN genre_counts gc ON gc.year >= d.decade_start AND gc.year <= d.decade_end
)
SELECT decade_start, decade_end, genre
FROM decade_max_genre
WHERE rn = 1
ORDER BY decade_start
